import React, { useEffect, useRef } from 'react';

const Hall = (props) => {
    const audiNumber = props.audiNumber;

    const audiData = {
        1: {
            seatArray: [
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
            ],
            bookedSeats: ['A1R6S10', 'A1R6S11'],
            soldSeats: ['A1R6S14', 'A1R6S15', 'A1R6S18', 'A1R6S19', 'A1R6S20'],
        },
        2: {
            seatArray: [
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            ],
            bookedSeats: ['A2R4S1', 'A2R4S2'],
            soldSeats: ['A2R4S4', 'A2R5S18'],
        },
        3: {
            seatArray: [
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            ],
            bookedSeats: ['A3R1S2', 'A3R4S7'],
            soldSeats: ['A3R2S3', 'A3R3S8', 'A3R5S10'],
        },
    };

    const { seatArray, bookedSeats, soldSeats } = audiData[audiNumber];

    const [selectedSeats, setSelectedSeats] = React.useState([]);

    const handleSeatClick = (rowIndex, seatIndex) => {
        const actualSeatIndex = seatArray[rowIndex].slice(0, seatIndex).filter((seat) => seat === 1).length;
        const seatKey = `A${audiNumber}R${rowIndex + 1}S${actualSeatIndex + 1}`;
        if (!bookedSeats.includes(seatKey) && !soldSeats.includes(seatKey)) {
            setSelectedSeats((prevSelectedSeats) =>
                prevSelectedSeats.includes(seatKey)
                    ? prevSelectedSeats.filter((seat) => seat !== seatKey)
                    : [...prevSelectedSeats, seatKey]
            );
            props.onSeatSelection(seatKey);
        }
    };

    const svgRef = useRef(null);

    useEffect(() => {
        const svgElement = svgRef.current;
        const gElement = svgElement.querySelector('g');

        if (gElement) {
            const { width, height } = gElement.getBBox();
            svgElement.setAttribute('width', width + 1);
            svgElement.setAttribute('height', height);
        }
    }, []);

    return (
        <div className="theater-container">
            <div className="theater">
                <svg width="100%" height="500" xmlns="http://www.w3.org/2000/svg" ref={svgRef}>
                    <defs>
                        <path
                            id="seat"
                            d="M39 18H33.9592L33.2984 6.11402C33.1087 2.68576 30.2693 0 26.8357 0H18.1643C14.7307 0 11.8912 2.68576 11.7015 6.11402L11.0407 18H6.00003C5.1728 18 4.5 18.6727 4.5 19.5V21.0001C4.5 21.8273 5.17271 22.5001 6.00003 22.5001V30.7501C6.00003 31.9906 7.00954 33.0001 8.25003 33.0001H9V33.75C9 34.164 9.33521 34.5 9.74997 34.5H12V42.75C12 43.9905 13.0095 45 14.25 45C15.4905 45 16.5 43.9905 16.5 42.75V34.5H28.4999V42.75C28.4999 43.9905 29.5095 45 30.7499 45C31.9904 45 32.9999 43.9905 32.9999 42.75V34.5H35.2499C35.6647 34.5 35.9999 34.164 35.9999 33.75V33H36.7499C37.9904 33 38.9999 31.9905 38.9999 30.75V22.5C39.8271 22.5 40.4999 21.8273 40.4999 21V19.4999C40.5 18.6727 39.8273 18 39 18ZM14.697 6.28128C14.7982 4.44076 16.3215 3.00006 18.1643 3.00006H26.8357C28.6784 3.00006 30.2018 4.44085 30.303 6.28128C30.327 6.69454 30.0098 7.04777 29.5966 7.07106C29.5815 7.07186 29.5681 7.07256 29.5538 7.07256C29.1586 7.07256 28.8279 6.76354 28.8061 6.36381C28.7482 5.31826 27.8828 4.5 26.8357 4.5H18.1643C17.1172 4.5 16.2518 5.31826 16.194 6.36372C16.1715 6.77698 15.8228 7.0882 15.4035 7.07098C14.9903 7.04777 14.673 6.69454 14.697 6.28128ZM6.00003 21V19.4999H10.9568L10.8736 21H6.75H6.00003ZM10.2188 26.5012C10.1355 26.5785 10.0568 26.6595 9.98024 26.7442C9.90897 26.8222 9.84375 26.904 9.78003 26.9873C9.70049 27.0908 9.62631 27.1957 9.55881 27.3075C9.48604 27.4253 9.42003 27.5461 9.36079 27.6705C9.32933 27.738 9.29707 27.8048 9.2693 27.8745C9.19652 28.056 9.13878 28.2435 9.09527 28.4355C9.08402 28.485 9.07655 28.5353 9.0675 28.5855C9.02698 28.8031 9 29.0243 9 29.2501V31.5001H8.25003C7.83606 31.5001 7.50006 31.1634 7.50006 30.7501V22.5H10.791L10.5855 26.199C10.5023 26.2582 10.428 26.3272 10.3501 26.3932C10.3065 26.4292 10.2608 26.463 10.2188 26.5012ZM34.5 32.25V32.9999H32.25H29.25H15.75H12.75H10.5V32.25V29.25C10.5 29.0625 10.5293 28.8788 10.5758 28.7017C10.5848 28.665 10.5975 28.6305 10.6087 28.5945C10.6582 28.437 10.7213 28.2833 10.8045 28.1407C10.8113 28.1287 10.8172 28.1159 10.8247 28.104C11.0272 27.7703 11.3167 27.486 11.6737 27.2895C11.8433 27.1965 12.0157 27.1275 12.1897 27.0788C12.198 27.0773 12.2063 27.0735 12.2145 27.0713C12.3907 27.0248 12.57 27 12.75 27H32.2501C32.4301 27 32.6093 27.0248 32.7856 27.0713C32.7938 27.0736 32.8021 27.0773 32.8096 27.0788C32.9843 27.1275 33.1568 27.1965 33.3263 27.2895C33.684 27.486 33.9728 27.7703 34.1753 28.104C34.1828 28.1159 34.1888 28.1288 34.1955 28.1407C34.2787 28.2832 34.3418 28.437 34.3912 28.5945C34.4025 28.6305 34.4152 28.665 34.4242 28.701C34.4707 28.8787 34.5 29.0625 34.5 29.25V32.25ZM37.5 30.75C37.5 31.1633 37.164 31.5 36.7501 31.5H36V29.25C36 29.0243 35.973 28.803 35.9325 28.5855C35.9235 28.5352 35.916 28.485 35.9047 28.4354C35.8612 28.2434 35.8035 28.0559 35.7307 27.8744C35.7029 27.8046 35.6707 27.7379 35.6392 27.6704C35.58 27.5459 35.514 27.4252 35.4412 27.3074C35.3737 27.1957 35.2994 27.0907 35.22 26.9872C35.1562 26.9039 35.0909 26.8222 35.0198 26.7442C34.9433 26.6594 34.8645 26.5784 34.7812 26.5011C34.7392 26.4629 34.6935 26.4292 34.65 26.3931C34.572 26.3271 34.4978 26.2581 34.4145 26.1989L34.209 22.5H37.4999V30.75H37.5ZM39 21H38.25H34.1265L34.0433 19.4999H39.0001V21H39Z"
                        />
                    </defs>

                    <g>
                        {seatArray.map((row, rowIndex) =>
                            row.map((seat, seatIndex) => {
                                if (seat === 1) {
                                    const actualSeatIndex = row.slice(0, seatIndex).filter((seat) => seat === 1).length;
                                    const seatKey = `A${audiNumber}R${rowIndex + 1}S${actualSeatIndex + 1}`;
                                    return (
                                        <use
                                            xlinkHref="#seat"
                                            key={`${rowIndex}-${seatIndex}`}
                                            x={seatIndex * 50}
                                            y={rowIndex * 50}
                                            onClick={() => {
                                                if (!bookedSeats.includes(seatKey) && !soldSeats.includes(seatKey)) {
                                                    handleSeatClick(rowIndex, seatIndex);
                                                }
                                            }}
                                            className={`seat ${selectedSeats.includes(seatKey)
                                                ? 'selected'
                                                : bookedSeats.includes(seatKey)
                                                ? 'booked'
                                                : soldSeats.includes(seatKey)
                                                ? 'sold'
                                                : 'available'}`}
                                        />
                                    );
                                } else {
                                    return null;
                                }
                            })
                        )}
                    </g>
                </svg>
            </div>
            <div className="row screen">
                <p className="col-4">Screen</p>
            </div>
        </div>
    );
};

export default Hall;
